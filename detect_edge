#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import matplotlib.pyplot as plt
import numpy as np
import cv2
import time
from cv_bridge import CvBridge
from std_msgs.msg import UInt8, Float64
from sensor_msgs.msg import Image, CompressedImage
from dynamic_reconfigure.server import Server
from turtlebot3_autorace_detect.cfg import DetectLaneParamsConfig

class DetectEdge():
    def __init__(self):
        print("I am being initialised")
        self.sub_image_type = "compressed"         # you can choose image type "compressed", "raw"
        self.pub_image_type = "compressed"  # you can choose image type "compressed", "raw"

        if self.sub_image_type == "compressed":
            # subscribes compressed image
            self.sub_image_original = rospy.Subscriber('/camera/image/compressed', CompressedImage, self.cbFindLane, queue_size = 1)
        elif self.sub_image_type == "raw":
            # subscribes raw image
            self.sub_image_original = rospy.Subscriber('/detect/image_input', Image, self.cbFindLane, queue_size = 1)

        if self.pub_image_type == "compressed":
            # publishes lane image in compressed type
            self.pub_image_lane = rospy.Publisher('/detect/image_output/compressed', CompressedImage, queue_size = 1)
        elif self.pub_image_type == "raw":
            # publishes lane image in raw type
            self.pub_image_lane = rospy.Publisher('/detect/image_output', Image, queue_size = 1)

        self.pub_lane = rospy.Publisher('/detect/edge', Float64, queue_size = 1)

        #converts between ROS Image messages and OpenCV images
        self.cvBridge = CvBridge()

        self.counter = 1

        self.window_width = 1000.
        self.window_height = 600.

    def cbFindLane(self, image_msg):
        # TODO: mov_avg error

        # Change the frame rate by yourself. Now, it is set to 1/3 (10fps).
        # Unappropriate value of frame rate may cause huge delay on entire recognition process.
        # This is up to your computer's operating power.
        if self.counter % 3 != 0:
            self.counter += 1
            return
        else:
            self.counter = 1

        if self.sub_image_type == "compressed":
            #converting compressed image to opencv image
            np_arr = np.fromstring(image_msg.data, np.uint8)
            cv_image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
        elif self.sub_image_type == "raw":
            cv_image = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        blur1 = cv2.blur(gray,(5,5))
        high_th, th_img = cv2.threshold(blur1,200,255,cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        low_th = 0.5*high_th
        blur = cv2.blur(th_img,(5,5))
        #method for calculating the threshold of the image (OTSU's method)
        #high_thresh, thresh_im = cv2.threshold(im, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        #lowThresh = 0.5*high_thresh
        #edge = cv2.Canny(blur, 180, 255, 30)
        edge = cv2.Canny(blur, low_th, high_th, 30)
        lines = cv2.HoughLines(edge,1,np.pi/180, 200,20,0)

        if lines is not None:
            for i in range(len(lines)):
                rho, theta = lines[i][0]
                a = np.cos(theta)
                b = np.sin(theta)
                x0 = a*rho; y0 = b*rho

                xs = [int(x0 + 1000*(-b)), int(x0 - 1000*(-b))]
                ys = [int(y0 + 1000*(a)), int(y0 - 1000*(a))]
                cv2.line(cv_image,(int(x0 + 1000*(-b)), int(y0 + 1000*(a))),( int(x0 - 1000*(-b)),int(y0 - 1000*(a)) ), (255, 0, 0), 2)


        #cv2.imshow('frame',gray)
        self.pub_image_lane.publish(self.cvBridge.cv2_to_compressed_imgmsg(edge, "jpg"))
        #self.pub_image_lane.publish(self.cvBridge.cv2_to_compressed_imgmsg(th_img, "jpg"))
        #self.pub_image_lane.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image, "jpg"))

        #cv2.imshow('lines',cv_image)
        time.sleep(0.005)

        cv2.destroyAllWindows()

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_edge')
    node = DetectEdge()
    node.main()
